# -*- coding: utf-8 -*-
"""amazon_food_reviews_template.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/yukamara/final_project/blob/yuk/amazon_food_reviews_template.ipynb

## Import Libraries
"""

# importing required libraries
import pandas as pd
from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS, TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.metrics import f1_score
from sklearn.model_selection import train_test_split

"""## Read in Dataset and visualize it"""

data = pd.read_csv('https://data-bootcamp-x399.s3.us-east-2.amazonaws.com/Reviews.csv')

data.head()

"""## Extract the Scores and Texts, Rename the Columns, and View Properties of the Data"""

df = data[["Score","Text"]]
df.head()

reviews_df = df.rename(columns={"Score": "Rating", "Text": "Review"})
reviews_df.head()

reviews_df.shape

reviews_df.Rating.value_counts()

"""## Split the Data into a Training and Test Sets"""

# We stratify the data in order to have equal proportions of ratings in both training and test sets
train, test = train_test_split(reviews_df, test_size = 0.2, stratify = reviews_df['Rating'], random_state=0)

train.shape, test.shape

train.Rating.value_counts(normalize=True)

test.Rating.value_counts(normalize=True)

"""## Create a Term Frequency Inverse Document Frequency (TF-IDF) Vectorizer Object"""

tfidf_vectorizer = TfidfVectorizer(lowercase= True, max_features=1000, stop_words=ENGLISH_STOP_WORDS)

"""## Fit Object with Training Dataset of Reviews"""

tfidf_vectorizer.fit(train.Review)

train_idf = tfidf_vectorizer.transform(train.Review)
test_idf  = tfidf_vectorizer.transform(test.Review)

"""## Fitting and Prediction of the Logistic Regression Model"""

# Create an object of the logistic regression model
classifier = LogisticRegression(max_iter=400)

# Fit the model with the training dataset
classifier.fit(train_idf, train.Rating)

# predict the label on the traning dataset
predict_train = classifier.predict(train_idf)

# predict the label on the test dataset
predict_test = classifier.predict(test_idf)

# f1 score on train data
# f1 = 2 * (precision * recall) / (precision + recall)
f1_score(y_true= train.Rating, y_pred= predict_train, average='weighted')

# f1 score on train data
f1_score(y_true= test.Rating, y_pred= predict_test, average='weighted')

"""## Set up Pipeline"""

# define the stages of the pipeline

pipeline = Pipeline(steps= [('tfidf', TfidfVectorizer(lowercase=True,
                                                      max_features=1000,
                                                      stop_words= ENGLISH_STOP_WORDS)),
                            ('model', LogisticRegression(max_iter=400))])

# fit the pipeline model with the training data  
pipeline.fit(train.Review, train.Rating)

pipeline.predict(train.Review)

"""## Test the Pipeline with a Actual Sample Reviews from Amazon"""

review1 = ["Great taffy at a great price. There was a wide assortment of yummy taffy. Delivery was very quick. If your a taffy lover, this is a deal."]

pipeline.predict(review1)

review2 = ["They don't. They're sent in those tear off plastic bags you find in supermarket produce sections. No padding, so they often arrived bruised. We stopped ordering them months ago for this reason :("]

pipeline.predict(review2)

review3 = ["I'm not sure what you mean by 'what label' but the avocados I received yesterday, the label says grown in the USA.."]

pipeline.predict(review3)

review4 = ["No, not until you receive the product. We've always received fresh products."]

pipeline.predict(review4)

review5 = ["I could not understand why I was consuming vast quantities of water ( 3 liters) within one hour during the winter and without any recent exercise, until I recalled I consumed 2 oz. of this Applegate dry salami. Beware, especially if you are medically salt restricted. This Applegate item is adequate to send you to the ER for treatment of uncontrolled hypertention."]

pipeline.predict(review5)

"""## Save Pipeline Object Using the Dump Funfcion"""

from joblib import dump

dump(pipeline, "amazon_reviews.joblib")

reviews_df[reviews_df.Rating == 5]

reviews_df[reviews_df.Rating == 4]

reviews_df[reviews_df.Rating == 3]

reviews_df[reviews_df.Rating == 2]

reviews_df[reviews_df.Rating == 1]